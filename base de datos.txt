-- =====================================================
-- SISTEMA DE GESTIÓN ESCOLAR - CREACIÓN DE TABLAS
-- =====================================================

-- Tabla de roles
CREATE TABLE IF NOT EXISTS roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL,
    descripcion TEXT,
    nivel INTEGER NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de permisos
CREATE TABLE IF NOT EXISTS permisos (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(100) UNIQUE NOT NULL,
    modulo VARCHAR(50) NOT NULL,
    descripcion TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla intermedia roles_permisos
CREATE TABLE IF NOT EXISTS roles_permisos (
    id SERIAL PRIMARY KEY,
    rol_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permiso_id INTEGER NOT NULL REFERENCES permisos(id) ON DELETE CASCADE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(rol_id, permiso_id)
);

-- Tabla de usuarios
CREATE TABLE IF NOT EXISTS usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(200) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    telefono VARCHAR(20),
    rol_id INTEGER NOT NULL REFERENCES roles(id),
    estado VARCHAR(20) DEFAULT 'activo',
    url_avatar VARCHAR(500),
    ultimo_acceso TIMESTAMP,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de niveles educativos
CREATE TABLE IF NOT EXISTS niveles_educativos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL,
    orden INTEGER NOT NULL,
    color_hex VARCHAR(7),
    activo BOOLEAN DEFAULT true
);

-- Tabla de grados
CREATE TABLE IF NOT EXISTS grados (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    nivel_educativo_id INTEGER NOT NULL REFERENCES niveles_educativos(id),
    rango_edad VARCHAR(50),
    ano_academico VARCHAR(9) NOT NULL,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(nombre, ano_academico)
);

-- Tabla de secciones
CREATE TABLE IF NOT EXISTS secciones (
    id SERIAL PRIMARY KEY,
    grado_id INTEGER NOT NULL REFERENCES grados(id) ON DELETE CASCADE,
    nombre VARCHAR(10) NOT NULL,
    capacidad INTEGER,
    cantidad_estudiantes INTEGER DEFAULT 0,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(grado_id, nombre)
);

-- Tabla de materias
CREATE TABLE IF NOT EXISTS materias (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    codigo VARCHAR(20) UNIQUE,
    descripcion TEXT,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de estudiantes
CREATE TABLE IF NOT EXISTS estudiantes (
    id SERIAL PRIMARY KEY,
    dpi VARCHAR(20) UNIQUE NOT NULL,
    nombre VARCHAR(200) NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    genero VARCHAR(20),
    direccion VARCHAR(500),
    telefono VARCHAR(20),
    email VARCHAR(150),
    url_avatar VARCHAR(500),
    grado_id INTEGER NOT NULL REFERENCES grados(id),
    seccion_id INTEGER NOT NULL REFERENCES secciones(id),
    fecha_inscripcion DATE NOT NULL,
    estado VARCHAR(20) DEFAULT 'activo',
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de padres de familia
CREATE TABLE IF NOT EXISTS padres (
    id SERIAL PRIMARY KEY,
    dpi VARCHAR(20) UNIQUE,
    nombre VARCHAR(200) NOT NULL,
    relacion VARCHAR(50) NOT NULL,
    telefono VARCHAR(20) NOT NULL,
    telefono_secundario VARCHAR(20),
    email VARCHAR(150),
    direccion VARCHAR(500),
    ocupacion VARCHAR(100),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla intermedia estudiantes_padres
CREATE TABLE IF NOT EXISTS estudiantes_padres (
    id SERIAL PRIMARY KEY,
    estudiante_id INTEGER NOT NULL REFERENCES estudiantes(id) ON DELETE CASCADE,
    padre_id INTEGER NOT NULL REFERENCES padres(id) ON DELETE RESTRICT,
    es_contacto_principal BOOLEAN DEFAULT false,
    es_contacto_emergencia BOOLEAN DEFAULT false,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(estudiante_id, padre_id)
);

-- Tabla de periodos académicos
CREATE TABLE IF NOT EXISTS periodos_academicos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    ano_academico VARCHAR(9) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    orden INTEGER NOT NULL,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(nombre, ano_academico)
);

-- Tabla de actividades
CREATE TABLE IF NOT EXISTS actividades (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(200) NOT NULL,
    descripcion TEXT,
    docente_id INTEGER NOT NULL REFERENCES usuarios(id),
    materia_id INTEGER NOT NULL REFERENCES materias(id),
    grado_id INTEGER NOT NULL REFERENCES grados(id),
    seccion_id INTEGER NOT NULL REFERENCES secciones(id),
    periodo_id INTEGER NOT NULL REFERENCES periodos_academicos(id),
    tipo VARCHAR(20) NOT NULL,
    puntos_maximos DECIMAL(5,2) NOT NULL,
    ponderacion_porcentaje DECIMAL(5,2),
    fecha_entrega DATE,
    estado VARCHAR(20) DEFAULT 'pendiente',
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de calificaciones de actividades
CREATE TABLE IF NOT EXISTS calificaciones_actividades (
    id SERIAL PRIMARY KEY,
    actividad_id INTEGER NOT NULL REFERENCES actividades(id) ON DELETE CASCADE,
    estudiante_id INTEGER NOT NULL REFERENCES estudiantes(id) ON DELETE CASCADE,
    puntos_obtenidos DECIMAL(5,2),
    porcentaje_calificacion DECIMAL(5,2),
    comentarios TEXT,
    calificado_por INTEGER NOT NULL REFERENCES usuarios(id),
    fecha_calificacion TIMESTAMP,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(actividad_id, estudiante_id)
);

-- Tabla de conceptos de pago
CREATE TABLE IF NOT EXISTS conceptos_pago (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL,
    descripcion TEXT,
    monto_por_defecto DECIMAL(10,2),
    tipo VARCHAR(20),
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de pagos
CREATE TABLE IF NOT EXISTS pagos (
    id SERIAL PRIMARY KEY,
    estudiante_id INTEGER NOT NULL REFERENCES estudiantes(id),
    concepto_id INTEGER NOT NULL REFERENCES conceptos_pago(id),
    monto DECIMAL(10,2) NOT NULL,
    fecha_pago DATE NOT NULL,
    metodo_pago VARCHAR(20),
    numero_referencia VARCHAR(100),
    numero_recibo VARCHAR(100) UNIQUE NOT NULL,
    estado VARCHAR(20) DEFAULT 'pendiente',
    comentarios TEXT,
    registrado_por INTEGER NOT NULL REFERENCES usuarios(id),
    verificado_por INTEGER REFERENCES usuarios(id),
    fecha_verificacion TIMESTAMP,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de estado de cuenta de estudiantes
CREATE TABLE IF NOT EXISTS estado_cuenta_estudiante (
    id SERIAL PRIMARY KEY,
    estudiante_id INTEGER UNIQUE NOT NULL REFERENCES estudiantes(id) ON DELETE CASCADE,
    total_cargado DECIMAL(10,2) DEFAULT 0,
    total_pagado DECIMAL(10,2) DEFAULT 0,
    saldo DECIMAL(10,2) DEFAULT 0,
    fecha_ultimo_pago DATE,
    estado_pago VARCHAR(20) DEFAULT 'al_dia',
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla de asistencia
CREATE TABLE IF NOT EXISTS asistencias (
    id SERIAL PRIMARY KEY,
    estudiante_id INTEGER NOT NULL REFERENCES estudiantes(id) ON DELETE CASCADE,
    fecha DATE NOT NULL,
    hora_entrada INTEGER,
    hora_salida INTEGER,
    estado VARCHAR(20) DEFAULT 'presente',
    metodo_entrada VARCHAR(20) DEFAULT 'manual',
    metodo_salida VARCHAR(20) DEFAULT 'manual',
    autorizado_por INTEGER REFERENCES usuarios(id),
    notas TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(estudiante_id, fecha)
);

-- Tabla de periodos académicos
CREATE TABLE IF NOT EXISTS periodos_academicos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    ano_academico VARCHAR(9) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    orden INTEGER NOT NULL,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(nombre, ano_academico)
);

-- Tabla de calificaciones de estudiantes por materia y período
CREATE TABLE IF NOT EXISTS student_grades (
    id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL REFERENCES estudiantes(id) ON DELETE CASCADE,
    subject_id INTEGER NOT NULL REFERENCES materias(id) ON DELETE CASCADE,
    period_id INTEGER NOT NULL REFERENCES periodos_academicos(id) ON DELETE CASCADE,
    value DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(student_id, subject_id, period_id)
);





-- =====================================================
-- DATOS INICIALES - ROLES, USUARIOS, PERMISOS, NIVELES, MATERIAS
-- =====================================================

-- Roles
INSERT INTO roles (nombre, descripcion, nivel)
VALUES
('Administrador General', 'Acceso total a todo', 1),
('Docente', 'Acceso a clases y estudiantes', 2),
('Director/Secretaria', 'Acceso administrativo', 3),
('Padre', 'Acceso a hijos', 4)
ON CONFLICT (nombre) DO NOTHING;

-- Usuarios iniciales (usuario y contraseña estática)
INSERT INTO usuarios (nombre, username, telefono, rol_id, password_hash)
SELECT 'Administrador del Sistema', 'admin', '50212345678', r.id, crypt('admin123', gen_salt('bf'))
FROM roles r
WHERE r.nombre = 'Administrador General'
ON CONFLICT (username) DO UPDATE
SET password_hash = EXCLUDED.password_hash;

INSERT INTO usuarios (nombre, username, telefono, rol_id, password_hash)
SELECT 'Docente Ejemplo', 'docente1', '50223456789', r.id, crypt('docente123', gen_salt('bf'))
FROM roles r
WHERE r.nombre = 'Docente'
ON CONFLICT (username) DO UPDATE
SET password_hash = EXCLUDED.password_hash;

INSERT INTO usuarios (nombre, username, telefono, rol_id, password_hash)
SELECT 'Directora Ejemplo', 'directora1', '50234567890', r.id, crypt('directora123', gen_salt('bf'))
FROM roles r
WHERE r.nombre = 'Director/Secretaria'
ON CONFLICT (username) DO UPDATE
SET password_hash = EXCLUDED.password_hash;

INSERT INTO usuarios (nombre, username, telefono, rol_id, password_hash)
SELECT 'Padre Ejemplo', 'padre1', '50245678901', r.id, crypt('padre123', gen_salt('bf'))
FROM roles r
WHERE r.nombre = 'Padre'
ON CONFLICT (username) DO UPDATE
SET password_hash = EXCLUDED.password_hash;

-- Niveles educativos
INSERT INTO niveles_educativos (nombre, orden, color_hex)
VALUES
('Preprimaria', 1, '#EC4899'),
('Primaria', 2, '#3B82F6'),
('Secundaria', 3, '#10B981')
ON CONFLICT (nombre) DO NOTHING;

-- Materias básicas
INSERT INTO materias (nombre, codigo, descripcion)
VALUES
('Matemáticas', 'MAT', 'Matemáticas básicas y avanzadas'),
('Español', 'ESP', 'Lenguaje y comunicación'),
('Ciencias Naturales', 'CN', 'Biología, Física y Química'),
('Estudios Sociales', 'ES', 'Historia, Geografía y Civismo'),
('Inglés', 'ING', 'Idioma inglés'),
('Educación Física', 'EF', 'Actividad física y deporte'),
('Arte', 'ART', 'Expresión artística'),
('Computación', 'COMP', 'Tecnología e informática')
ON CONFLICT (nombre) DO NOTHING;

-- Periodos académicos básicos
INSERT INTO periodos_academicos (nombre, ano_academico, fecha_inicio, fecha_fin, orden)
VALUES
('Primer Trimestre', '2024', '2024-01-15', '2024-04-15', 1),
('Segundo Trimestre', '2024', '2024-04-16', '2024-07-15', 2),
('Tercer Trimestre', '2024', '2024-07-16', '2024-10-15', 3),
('Cuarto Trimestre', '2024', '2024-10-16', '2024-12-15', 4)
ON CONFLICT (nombre, ano_academico) DO NOTHING;
